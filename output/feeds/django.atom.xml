<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>nJcx's Blog - Django</title><link href="http://www.njcx.bid/" rel="alternate"></link><link href="http://www.njcx.bid/feeds/django.atom.xml" rel="self"></link><id>http://www.njcx.bid/</id><updated>2017-04-15T10:20:00+03:00</updated><entry><title>Python Web项目搭建实战-Django篇</title><link href="http://www.njcx.bid/posts/D10.html" rel="alternate"></link><published>2017-04-15T10:20:00+03:00</published><updated>2017-04-15T10:20:00+03:00</updated><author><name>nJcx</name></author><id>tag:www.njcx.bid,2017-04-15:/posts/D10.html</id><summary type="html">&lt;p&gt;Python Web项目搭建过程记录&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境：Ubuntu server 16.04 amd64&lt;/p&gt;
&lt;p&gt;我用的是PyPy替代了CPython,在纯Python项目上还没有遇到幺蛾子，性能提升看得见。先把nginx和supervisor装上，这里用supervisor监控进程的状态以及开机启动下文用到的uwsgi&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; sudo apt-get install nginx pypy pypy-lib pypy-dev supervisor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以配置pip国内源，把下面内容写到 ～/.pip/pip.conf 文件中,这样就可以用豆瓣的pip源加速了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;global&lt;span class="o"&gt;]&lt;/span&gt;
index-url &lt;span class="o"&gt;=&lt;/span&gt; http://pypi.douban.com/simple
&lt;span class="o"&gt;[&lt;/span&gt;install&lt;span class="o"&gt;]&lt;/span&gt;
trusted-host&lt;span class="o"&gt;=&lt;/span&gt;pypi.douban.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面我们为PyPy 安装pip和virtualenv、uwsgi&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libpcre3&lt;/span&gt; &lt;span class="n"&gt;libpcre3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pypa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;pypy&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;pypy&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="n"&gt;uwsgi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MySQL 数据库安装&lt;span class="o"&gt;(&lt;/span&gt;好像在本文用不到，先安装再说&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;apt-get install mysql-server libmysqlclient-dev -y
&amp;gt;pypy -m pip install mysql-python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们先创建一个PyPy的虚拟环境,就叫env&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; pypy -m virtualenv env
&amp;gt; &lt;span class="nb"&gt;source&lt;/span&gt; env/bin/activate
&amp;gt; pip install django tornado flask mysql-python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面，我们就要要配置这些nginx、supervisor、uwsgi,我们通过supervisor来管理uwsgi，&lt;/p&gt;
&lt;p&gt;先简单的建一个django的项目,叫blog，再创建一个blogapp&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; django-admin startproject blog
&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; blog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; django-admin startapp blogapp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过django内置的wsgi服务器测试，是正常的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; pypy manage.py runserver &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8080
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面我们把django和uwsgi桥接在一起,写一个桥接django_uwsgi.py 文件，放在blog目录里面&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt;
&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"DJANGO_SETTINGS_MODULE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"blog.settings"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#from django.core.wsgi import get_wsgi_application&lt;/span&gt;
&lt;span class="c1"&gt;#application = get_wsgi_application()&lt;/span&gt;
&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.handlers.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WSGIHandler&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WSGIHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面我们再写一个uwsgi的配置文件（还没有优化),就叫django.xml，也放到blog文件夹里面&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;uwsgi&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;socket&amp;gt;&lt;/span&gt;127.0.0.1:8521&lt;span class="nt"&gt;&amp;lt;/socket&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;chdir&amp;gt;&lt;/span&gt;/root/.pip/blog&lt;span class="nt"&gt;&amp;lt;/chdir&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;pythonpath&amp;gt;&lt;/span&gt;/root/.pip/env/site-packages&lt;span class="nt"&gt;&amp;lt;/pythonpath&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;django_uwsgi&lt;span class="nt"&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;daemonize&amp;gt;&lt;/span&gt;uwsgi.log&lt;span class="nt"&gt;&amp;lt;/daemonize&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/uwsgi&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;nginx 的配置文件，不过没有做静态文件处理，django的后台显示不正常&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
    listen   &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;## listen for ipv4; this line is default and implied&lt;/span&gt;
    &lt;span class="c1"&gt;#listen   [::]:80 default ipv6only=on; ## listen for ipv6&lt;/span&gt;

    &lt;span class="c1"&gt;#server_name blog;&lt;/span&gt;

    access_log /var/log/nginx/blog-access.log &lt;span class="p"&gt;;&lt;/span&gt;
    error_log /var/log/nginx/blog-error.log &lt;span class="p"&gt;;&lt;/span&gt;

    location / &lt;span class="o"&gt;{&lt;/span&gt;
            uwsgi_pass &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:8521&lt;span class="p"&gt;;&lt;/span&gt;
            include uwsgi_params&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，给我们自己开发的应用程序编写一个配置文件，让supervisor来管理它。每个进程的配置文件都可以单独分拆，放在/etc/supervisor/conf.d/目录下，以.conf作为扩展名,就叫django_app.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;program:app&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;uwsgi -x django.xml
&lt;span class="nv"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/root/.pip/blog
&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，进程app定义在[program:app]中，command是命令，directory是进程的当前目录，user是进程运行的用户身份。&lt;/p&gt;
&lt;p&gt;重启supervisor，让配置文件生效，然后运行命令supervisorctl启动进程：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;supervisorctl start app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;停止进程：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;supervisorctl stop app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，系统重启的时候，uwsgi 也会自动启动，省的我们手动启动它了，我是用的root用户配置的，生产环境不推荐这样做，全文基本搭建完了，运行也是正常的，后期，再深入一点，优化一下性能。&lt;/p&gt;</content><category term="Django"></category></entry><entry><title>利用Django实现RESTful API</title><link href="http://www.njcx.bid/posts/D4.html" rel="alternate"></link><published>2017-04-09T10:20:00+03:00</published><updated>2017-04-09T10:20:00+03:00</updated><author><name>nJcx</name></author><id>tag:www.njcx.bid,2017-04-09:/posts/D4.html</id><summary type="html">&lt;p&gt;利用Django实现RESTful API,实践记录如下&lt;/p&gt;</summary><content type="html">&lt;h4&gt;介绍&lt;/h4&gt;
&lt;p&gt;首先,什么是RESTful? 阮一峰大大写了两篇博文介绍的比较详尽&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2011/09/restful"&gt;理解RESTful架构&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html"&gt;RESTful API 设计指南&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;django 之 RESTful&lt;/h4&gt;
&lt;p&gt;浏览器向http服务器发出请求,服务器返回一个html,然后浏览器渲染这个html,然后，大家就能看到网页了，而RESTful是返回json、xml、yaml、csv等序列化文件，作为resource的载体，供前端或者app解析。django实现RESTful，一般使用djangorestframework模块&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;djangorestframework&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在settings.py中添加 rest_framework&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s1"&gt;'rest_framework'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这，djangorestframework 就装上的了。&lt;/p&gt;</content><category term="Django"></category></entry></feed>